#!/bin/bash

# 尝试使用未设置值的变量，脚本将停止执行
set -o nounset

config_file="dbuilder.conf"
github_id=""
token=""

init_config()
{
    github_id=$(grep '^GITHUB_ID=' "$config_file" | cut -d '=' -f2)

    if [ -z "$github_id" ]; then
        echo "Github ID为，请输入数据: "
        read github_id
        sed -i 's|^GITHUB_ID=.*|GITHUB_ID='"${github_id}"'|' "$config_file"
    fi

    if [ -e "/tmp/github_token" ]; then
        token=$(cat "/tmp/github_token")
    else
        echo "Github Token为空，请输入数据: "
        read token
        echo "$token" >> /tmp/github_token
    fi
}

fork_repo()
{
    init_config
    url="https://api.github.com/repos/deepin-community/$2/forks"
    curl -X POST \
        -H "Authorization: token $token" \
        $url

}

diff_source()
{
    source dbuilder-source pre "${2}"

    repo_path="$psource_path/repo"
    source_path="$psource_path/${psource}"

    repo_url="git@github.com:$3/${psource}.git"
    # clone代码
    if [ ! -e "repo" ]; then
        git clone $repo_url $repo_path
    fi

    cp -r $repo_path/.{git,github} $source_path
    cp -r $repo_path/debian/deepin $source_path/debian
}

diff_source_from_my_repo()
{
    init_config
    version=$(grep '^PACKAGE_VERSION=' "$config_file" | cut -d '=' -f2)
    if [ -z "$version" ]; then
        echo "发行版为空，请输入数据 (例: [ buster ] [ buster-backports ] [ bullseye ] [ bookworm ] [ sid ]): "
        read version
        sed -i 's|^PACKAGE_VERSION=.*|PACKAGE_VERSION='"${version}"'|' "$config_file"
    fi
    url="https://packages.debian.org/${version}/${2}"

    # 调用Python脚本并将结果逐行存储在数组中
    results=()
    while IFS= read -r result; do
        results+=("$result")
    done < <(python3 crawler $url)

    psource="${results[0]}"

    fork_repo "" "$psource"
    
    diff_source "" "$2" "$github_id"
}

create_pull_requests()
{
    init_config

    # 提取commit信息
    commit_url="https://api.github.com/repos/$github_id/$2/commits/master"

    commit=$(curl -L \
                -X GET \
                -H "Authorization: Bearer $token" \
                $commit_url \
            | jq '.commit.message'
    )
    echo $commit

    result=$(python3 -c "import json; \
        commit_list = $commit.split('\n'); \
        dct = { \
            'title': commit_list[0] \
        }; \
        print(json.dumps(dct)); \
    ")

    title=$(echo $result | jq .title) 
    url="https://api.github.com/repos/deepin-community/$2/pulls"

    curl -L \
        -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $token" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        $url \
        -d "{\"title\":\"$title\",\"body\":\"Log: \",\"head\":\"chenchongbiao:master\",\"base\":\"master\"}"
}

case "$1" in
    fork)
        fork_repo "$@"
        ;;
    diff)
        diff_source "$@"
        ;;
    diffm)
        diff_source_from_my_repo "$@"
        ;;
    cpr)
        create_pull_requests "$@"
        ;;
esac