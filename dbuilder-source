#!/bin/bash

# 尝试使用未设置值的变量，脚本将停止执行
set -o nounset

save_source_path=""
config_file="dbuilder.conf"
psource=""
description=""
purl=""

get_source()
{
    save_source_path=$(grep '^SAVE_SOURCE_PATH=' "$config_file" | cut -d '=' -f2)
    if [ -z "$save_source_path" ]; then
        echo "代码保存路径为空，请输入数据 (例: /tmp/packages): "
        read save_source_path
        sed -i 's|^SAVE_SOURCE_PATH=.*|SAVE_SOURCE_PATH='"${save_source_path}"'|' "$config_file"
    fi

    # 创建文件夹
    [ ! -d $save_source_path ] && mkdir -p $save_source_path

    version=$(grep '^PACKAGE_VERSION=' "$config_file" | cut -d '=' -f2)
    if [ -z "$version" ]; then
        echo "发行版为空，请输入数据 (例: [ buster ] [ buster-backports ] [ bullseye ] [ bookworm ] [ sid ]): "
        read version
        sed -i 's|^PACKAGE_VERSION=.*|PACKAGE_VERSION='"${version}"'|' "$config_file"
    fi
    url="https://packages.debian.org/${version}/${2}"

    # 调用Python脚本并将结果逐行存储在数组中
    results=()
    while IFS= read -r result; do
        results+=("$result")
    done < <(python3 crawler $url)

    psource="${results[0]}"
    description="${results[1]}"
    purl="${results[2]}"

    export $psource

    # 新建目录
    dsc_dir=$save_source_path/$psource
    current_path=$(pwd)
    mkdir -p $dsc_dir
    cd $dsc_dir
    dget $purl

    cd $current_path

cat << EOF

软件包名: ${2}
源码包名: $psource
描述: $description
dsc下载链接: $purl
EOF

cat << EOF >> /tmp/repos.yml
  - repo: $psource #main
    group: deepin-sysdev-team
    info: $description
EOF
}

check_build_deps()
{
    get_source "$@"

    save_source_path=$(grep '^SAVE_SOURCE_PATH=' "$config_file" | cut -d '=' -f2)
    version=$(grep '^PACKAGE_VERSION=' "$config_file" | cut -d '=' -f2)
    dsc_dir=$save_source_path/$psource
    current_path=$(pwd)

    cd $dsc_dir
    dsc_file=$(basename $(ls ${dsc_dir}/*.dsc))
    if [ ! -e "$psource" ]; then
        dpkg-source -x $dsc_name "${psource}"
    fi

    cd $psource
    result=$(sudo apt build-dep .)
    
    package_name=$(echo "$result" | grep -oP 'Depends: \K\S+')
    # 将提取的包名添加到数组中
    package_list=($package_name)
    # 遍历打印数组中的包名
    for package in "${package_list[@]}"; do
        echo "$package"
    done

    cd $current_path
}

case $1 in
    get)
        get_source "$@"
        ;;
    deps)
        check_build_deps "$@"
        ;;
esac
